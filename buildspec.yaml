version: 0.2

#env:
  #variables:
     # key: "value"
     # key: "value"
  #parameter-store:
     # key: "value"
     # key: "value"
  #secrets-manager:
     # key: secret-id:json-key:version-stage:version-id
     # key: secret-id:json-key:version-stage:version-id
  #exported-variables:
     # - variable
     # - variable
  #git-credential-helper: yes
#batch:
  #fast-fail: true
  #build-list:
  #build-matrix:
  #build-graph:
phases:
  install:
    #If you use the Ubuntu standard image 2.0 or later, you must specify runtime-versions.
    #If you specify runtime-versions and use an image other than Ubuntu standard image 2.0, the build fails.
    runtime-versions:
      docker: 19
      # name: version
      # name: version
    #commands:
      # - command
      # - command
  #pre_build:
    #commands:
      # - command
      # - command
  build:
    commands:
      - |
        ##==Pull image from source repo==
        
        echo "login source registry"
        aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $src_account.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
        srcImage="$src_account.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO_NAME:$ECR_REPO_TAG"
        echo "pull image"
        docker pull $srcImage
        
        ##==Assume role==
        echo "Assuming role $dest_role"
        sts=$(aws sts assume-role \
          --role-arn "$dest_role" \
          --role-session-name target_profile \
          --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
          --output text)
        echo "Converting sts to array"
        sts=($sts)
        echo "AWS_ACCESS_KEY_ID is ${sts[0]}"
        aws configure set aws_access_key_id ${sts[0]} --profile target_profile
        aws configure set aws_secret_access_key ${sts[1]} --profile target_profile
        aws configure set aws_session_token ${sts[2]} --profile target_profile
        echo "credentials stored in the profile named target_profile"
        
        ##==Check if repo exists in target account target region==
        if ! repoMsg=$(aws ecr describe-repositories --repository-names $ECR_REPO_NAME --region $dest_region --profile target_profile 2>&1); then
          echo -n "$ECR_REPO_NAME does not exists in ECR@$dest_region, creating... "
          aws ecr create-repository --repository-name $ECR_REPO_NAME --region $dest_region --profile target_profile > /dev/null
          echo "done."
        fi

        ##==Push image to target repo==
        targetImage="$dest_account.dkr.ecr.$dest_region.amazonaws.com/$ECR_REPO_NAME:$ECR_REPO_TAG"
        docker tag $srcImage $targetImage
        echo "login target registry in $dest_account"
        
        aws ecr get-login-password --region $dest_region --profile target_profile | docker login --username AWS --password-stdin $dest_account.dkr.ecr.$dest_region.amazonaws.com
        echo "push image to target account $dest_account target region $dest_region"
        docker push $targetImage
      # - command
      # - command
  #post_build:
    #commands:
      # - command
      # - command
#reports:
  #report-name-or-arn:
    #files:
      # - location
      # - location
    #base-directory: location
    #discard-paths: yes
    #file-format: JunitXml | CucumberJson
#artifacts:
  #files:
    # - location
    # - location
  #name: $(date +%Y-%m-%d)
  #discard-paths: yes
  #base-directory: location
#cache:
  #paths:
    # - paths